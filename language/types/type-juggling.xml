<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7ee66cf9b5093a4b659bb1507465fcd1abd7c76a Maintainer: mumumu Status: ready -->
<sect1 xml:id="language.types.type-juggling">
 <title>型の相互変換</title>

 <simpara>
  PHP は変数宣言時に明示的な型定義を必要としません。
  型を定義しない場合、変数の型は保存する値によって決まります。
  これは、変数 <varname>$var</varname> に文字列を代入した場合、
  <varname>$var</varname> の型は文字列 (<type>string</type>)
  になることを意味しています。
  その後、整数値を <varname>$var</varname> に代入すると、
  その変数の型は整数 (<type>int</type>) になります。
 </simpara>

 <para>
  コンテクスト(文脈)によっては、
  PHP が値を別の型に自動変換しようとすることがあります。
  自動変換が行われる異なるコンテクストが存在するのは、以下のとおりです:
  <itemizedlist>
   <listitem>
    <simpara>数値のコンテクスト</simpara>
   </listitem>
   <listitem>
    <simpara>文字列のコンテクスト</simpara>
   </listitem>
   <listitem>
    <simpara>論理コンテクスト</simpara>
   </listitem>
   <listitem>
    <simpara>整数と文字列のコンテクスト</simpara>
   </listitem>
   <listitem>
    <simpara>比較のコンテクスト</simpara>
   </listitem>
   <listitem>
    <simpara>関数のコンテクスト</simpara>
   </listitem>
  </itemizedlist>
 </para>

 <note>
  <simpara>
   値を別の型として解釈する必要がある場合でも、
   値そのものの型は <emphasis>変わりません</emphasis>。
  </simpara>
 </note>

 <simpara>
  変数を強制的にある特定の型として評価させたい場合は、
  <link linkend="language.types.typecasting">型キャスト</link> のセクションを参照ください。
  ある変数の型を変更したい場合は、<function>settype</function> を参照ください。
 </simpara>

 <sect2>
  <title>数値のコンテクスト</title>

  <simpara>
   これは、
   <link linkend="language.operators.arithmetic">算術演算子</link>
   を使った場合です。
  </simpara>

  <simpara>
   このコンテクストでは、
   オペランドのどちらかが <type>float</type> 
   (または整数と解釈できない場合) の場合か、
   両方のオペランドが <type>float</type> の場合、
   結果の型は <type>float</type> になります。
   そうでない場合、オペランドは整数として解釈され、
   結果の型も整数になります。
   PHP 8.0.0 以降では、いずれかのオペランドが解釈できない場合、
   <classname>TypeError</classname> がスローされます。
  </simpara>
 </sect2>

 <sect2>
  <title>文字列のコンテクスト</title>

  <simpara>
   これは、
   <function>echo</function>,
   <function>print</function> や
   <link linkend="language.types.string.parsing">文字列中の変数のパース</link>、または
   <link linkend="language.operators.string">文字列演算子</link>
   を使った場合です。
  </simpara>

  <simpara>
   値は文字列として解釈されます。
  </simpara>
 </sect2>

 <sect2>
  <title>論理コンテクスト</title>

  <simpara>
   これは、
   制御構文や
   <link linkend="language.operators.comparison.ternary">三項演算子</link>,
   <link linkend="language.operators.logical">論理演算子</link>
   を使った場合です。
  </simpara>

  <simpara>
   値は論理値 (<type>bool</type>) として解釈されます。
  </simpara>
 </sect2>

 <sect2>
  <title>整数と文字列のコンテクスト</title>

  <simpara>
   これは、
   <link linkend="language.operators.bitwise">ビット演算子</link>
   を使った場合です。
  </simpara>

  <simpara>
   全てのオペランドが文字列の場合、
   結果の型も文字列になります。
   そうでない場合、
   オペランドは整数として解釈され、
   結果の方も整数になります。
   PHP 8.0.0 以降では、いずれかのオペランドが解釈できない場合、
   <classname>TypeError</classname> がスローされます。
  </simpara>
 </sect2>

 <sect2>
  <title>比較のコンテクスト</title>

  <simpara>
   これは、
   <link linkend="language.operators.comparison">比較演算子</link>
   を使った場合です。
  </simpara>

  <simpara>
   このコンテクストで発生する型変換については、
   <link linkend="language.operators.comparison.types">さまざまな型の比較表</link>
   に説明があります。
  </simpara>
 </sect2>

 <sect2>
  <title>関数のコンテクスト</title>

  <simpara>
   これは、値が型付きの引数、型付きプロパティに渡された場合や、
   戻り値の型を宣言している関数から返される値である場合です。
  </simpara>

  <para>
   型の自動変換(coercive) モードが有効な場合(デフォルト) には、
   スカラー型の値だけが別のスカラー型に変換される可能性があります。
   単一の型が宣言されている場合の振る舞いは、以下のとおりです:
   <itemizedlist>
    <listitem>
     <simpara>
      論理型(<type>bool</type>) が宣言されている場合: 値は <type>bool</type>  として解釈されます。
     </simpara>
     <simpara>
      整数型 (<type>int</type>) が宣言されてい場合: <type>int</type> への変換が定義されている場合は、<type>int</type> として解釈されます。つまり、文字列が <link linkend="language.types.numeric-strings">数値形式</link> である場合です。
     </simpara>
     <simpara>
      <type>float</type> が宣言されている場合: <type>float</type> への変換が定義されている場合は、<type>float</type> として解釈されます。つまり、文字列が <link linkend="language.types.numeric-strings">数値形式</link> である場合です。
     </simpara>
     <simpara>
      文字列 (<type>string</type>) 型として宣言されている場合:  値は文字列として解釈されます。
     </simpara>
    </listitem>
   </itemizedlist>

   型が union として宣言されている場合については、
   <link linkend="language.types.declarations.union.coercive">union 型と型の自動変換</link> を参照ください。
  </para>

  <warning>
   <simpara>
    <link linkend="functions.internal">内部関数</link> は、&null; を自動的にスカラー型に変換します。
    この振る舞いは PHP 8.1.0 以降は <emphasis>推奨されなくなっています</emphasis>。
   </simpara>
  </warning>
 </sect2>

 <sect2 xml:id="language.types.typecasting">
  <title>型キャスト</title>

  <simpara>
   型キャストは、変換しようとする型の名前を括弧で括り、
   キャストする変数の前に置くことで、値を別の型に変換するものです。
  </simpara>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;   // $foo は整数です
$bar = (bool) $foo;   // $bar は boolean です
?>
]]>
   </programlisting>
  </informalexample>

  <simpara>
   使用可能なキャストを以下に示します:
  </simpara>

  <simplelist>
   <member><literal>(int)</literal> - 整数(<type>int</type>) へのキャスト</member>
   <member><literal>(bool)</literal> - 論理値(<type>bool</type>) へのキャスト</member>
   <member><literal>(float)</literal> - <type>float</type> へのキャスト</member>
   <member><literal>(string)</literal> - 文字列(<type>string</type>) へのキャスト</member>
   <member><literal>(array)</literal> - 配列(<type>array</type>) へのキャスト</member>
   <member><literal>(object)</literal> - オブジェクト(<type>object</type>) へのキャスト</member>
   <member><literal>(unset)</literal> - <type>NULL</type> へのキャスト</member>
  </simplelist>

  <note>
   <para>
    <literal>(integer)</literal> は、<literal>(int)</literal> のエイリアスです。
    <literal>(boolean)</literal> は、<literal>(bool)</literal> のエイリアスです。
    <literal>(binary)</literal> は、<literal>(string)</literal> のエイリアスです。
    <literal>(double)</literal> と <literal>(real)</literal> は、<literal>(float)</literal> のエイリアスです。
    これらのキャストは、正規化された型の名前を使っていません。そのため使うこと自体がおすすめできません。
   </para>
  </note>

  <warning>
   <simpara>
    キャストのエイリアス <literal>(real)</literal> を使うことは、PHP 8.0.0 以降は推奨されなくなっています。
   </simpara>
  </warning>

  <warning>
   <simpara>
    <literal>(unset)</literal> によるキャストは、
    PHP 7.2.0 以降推奨されなくなりました。
    <literal>(unset)</literal> によるキャストは、
    値に <type>NULL</type> 値を代入することと同じです。
    <literal>(unset)</literal> によるキャストは、PHP 8.0.0 で削除されました。
   </simpara>
  </warning>

  <caution>
   <simpara>
    <literal>(binary)</literal> によるキャストと <literal>b</literal> プレフィックスもサポートされています。
    <literal>(binary)</literal> と <literal>(string)</literal> は現状は等価ですが、将来変更される可能性があります。そのため、現状等価であることに依存すべきではありません。
   </simpara>
  </caution>

  <note>
   <para>
   キャストの括弧内のホワイトスペースは無視されます。
   よって、以下のふたつのキャストは等価です:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <informalexample>
   <simpara>
    以下の例は、リテラル文字列や変数を、バイナリ文字列にキャストします:
   </simpara>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO Remove or move into string context section? -->
  <note>
   <simpara>
    ある変数を文字列にキャストする代わりに、
    二重引用符で括ることもできます。
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo は整数です
$str = "$foo";        // $str は文字列です
$fst = (string) $foo; // $fst も文字列です

// これは、"they are the same"を出力します
if ($fst === $str) {
    echo "they are the same";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>
   
  <para>
   型の間でキャストを行う際の動作は、必ずしも明確ではありません。
   詳細については、以下の節を参照ください:
   <simplelist>
    <member><link linkend="language.types.boolean.casting">論理値への変換</link></member>
    <member><link linkend="language.types.integer.casting">整数への変換</link></member>
    <member><link linkend="language.types.float.casting">浮動小数点数への変換</link></member>
    <member><link linkend="language.types.string.casting">文字列への変換</link></member>
    <member><link linkend="language.types.array.casting">配列への変換</link></member>
    <member><link linkend="language.types.object.casting">オブジェクトへの変換</link></member>
    <member><link linkend="language.types.resource.casting">リソース型への変換</link></member>
    <member><link linkend="language.types.null.casting">NULL への変換</link></member>
    <member><link linkend="types.comparisons">型の比較表</link></member>
   </simplelist>
  </para>
 </sect2>

 <simplesect>
  <note>
   <simpara>
    また、PHP では配列の添字と同じ構文を使用した文字列へのアクセスをサポートしているので、次の例はあらゆるバージョンの PHP で成立します:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a は文字列です
$a[0] = 'b';   // $a はここでも文字列です
echo $a;       // bar
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    詳細は、
    <link linkend="language.types.string.substr">文字列への文字単位のアクセス</link> を参照ください。
   </simpara>
  </note>
 </simplesect>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
