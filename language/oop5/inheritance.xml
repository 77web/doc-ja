<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 3ddc88b8364f27727a53ba6eb7c9a98f8525f3ce Maintainer: takagi Status: ready -->
 <sect1 xml:id="language.oop5.inheritance" xmlns="http://docbook.org/ns/docbook">
  <title>オブジェクトの継承</title>
  <para>
   プログラミング言語の原則としてよくみられるものに継承があります。
   PHP はオブジェクトモデルにおいてこの継承を利用しています。
   多くのクラスとオブジェクトとの連携に継承は関係しています。
  </para>
  <para>
   例えば、クラスを拡張するとき、サブクラスは親クラスから
   public と、protected のメソッドや、プロパティや定数をすべて引き継ぎます。
   (子の)クラスが親のメソッドを上書きしない限り、
   親のメソッドの機能が保持されます。
  </para>
  <para>
   これは、機能を定義して抽象化するのに便利です。
   また、同じようなオブジェクトに機能を追加する際に、
   共通機能を再実装する必要がなくなります。
  </para>
  <para>
   親クラスの private メソッドは、子クラスからアクセスすることができません。
   その結果として、子クラスは通常の継承のルールを無視して
   private メソッドそのものを再実装することができてしまいます。
   しかし、PHP 8.0.0 より前のバージョンでは、
   <literal>final</literal> と <literal>static</literal>
   に関連する制限が private メソッドに適用されていました。
   PHP 8.0.0 以降では、private メソッドの規則が強制されるのは
   <literal>private final</literal>
   として宣言されたコンストラクタのみになりました。
   なぜなら、static として宣言されたファクトリメソッドを使う場合に、
   コンストラクタを無効にする方法として <literal>private final</literal>
   が用いられるからです。
  </para>
  <para>
   メソッドやプロパティ、そして定数の
   <link linkend="language.oop5.visibility">アクセス権</link>
   に関するルールは、子クラスで緩めることが可能です。
   たとえば、
   親クラスで <literal>protected</literal> なメソッドは
   子クラスで <literal>public</literal> としてマークできます。
   しかし、厳しくすることはできません。
   つまり、親クラスで <literal>public</literal> なプロパティを
   子クラスで <literal>private</literal> にすることはできません。
  </para>

  <note>
   <para>
    オートローディングが有効になっていない限り、
    クラスの定義は実際に使うより前になければなりません。
    別のクラスを継承したクラスの場合は、
    そのクラスより前に親クラスが宣言されていなければなりません。
    この規則が適用されるのは、別のクラスやインターフェイスを継承したクラスです。
   </para>
  </note>
  <note>
   <para>
    It is not allowed to override a read-write property with a <link linkend="language.oop5.properties.readonly-properties">readonly property</link> or vice versa.
    <example>
     <programlisting role="php">
<![CDATA[
<?php

class A {
    public int $prop;
}
class B extends A {
    // Illegal: read-write -> readonly
    public readonly int $prop;
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>

  <sect2 xml:id="language.oop5.inheritance.examples">
   <example xml:id="language.oop5.inheritance.examples.ex1">
    <title>継承の例</title>
     <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }
    
    public function printPHP()
    {
        echo 'PHP is great.' . PHP_EOL;
    }
}

class Bar extends Foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

$foo = new Foo();
$bar = new Bar();
$foo->printItem('baz'); // 出力: 'Foo: baz'
$foo->printPHP();       // 出力: 'PHP is great' 
$bar->printItem('baz'); // 出力: 'Bar: baz'
$bar->printPHP();       // 出力: 'PHP is great'

?>
]]>
    </programlisting>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
