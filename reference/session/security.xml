<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a77a1425f1a8b20a03463ab7ccb5f31866f20a4f Maintainer: mumumu Status: working -->

<chapter xml:id="session.security" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>セッション と セキュリティ</title>
 <para>
  外部リンク: <link xlink:href="&url.session-fixation;">Session fixation</link>
 </para>
 <para>
  HTTP におけるセッション管理は、web セキュリティのコアに相当します。
  セッションがセキュアであることを保証するために、
  全てのとりうる軽減策を採用すべきです。
  開発者はまた、適用可能なセキュリティ対策を 有効/実行 すべきです。
 </para>

  <sect1 xml:id="features.session.security.management">
   <title>セッション管理の基礎</title>

   <sect2 xml:id="features.session.security.management.basic">
    <title>セッションのセキュリティ</title>

    <para>
     セッションモジュールは、セッションに保存された情報を
     作成したユーザーだけが見られることを保証できません。
     セッションに紐付けられた値によっては、
     セッションの機密性を守るために追加の対策が必要です。
    </para>

    <para>
     セッションに保存されているデータがどれくらい重要かを評価し、
     さらなる防御策を展開すべきかもしれません。
     通常、そうしてしまうとコストが高く付きます。
     たとえば、ユーザーの利便性を損なうことが挙げられます。
     たとえば、ユーザーを単純なソーシャルエンジニアリングから守るためには、
     <literal>session.use_only_cookies</literal> を有効にする必要があります。
     この場合、クッキーを無条件にクライアント側でも有効にしなければなりません。
     さもないとセッションが動作しないからです。
    </para>

    <para>
     既存のセッションIDをサードパーティに漏らす方法は複数あります。
     JavaScriptインジェクション、セッションID を URL に埋め込む方法、
     パケット盗聴、デバイスへの物理アクセス、などです。
     セッションIDが漏れてしまうと、
     サードパーティがその特定のIDに紐付けられた全てのリソースに
     アクセスできるようになってしまいます。

     既存のセッションIDを漏らす最初の方法は、URL でセッションIDを持ち回すやり方です。
     もし外部サイトやリソースへのリンクが存在したとすると、
     セッションIDを含むURLが、外部サイトのリファラログにに保存されるかもしれません。
     ふたつめは、より積極的な攻撃者がネットワークトラフィックを盗聴しているかもしれません。
     ネットワークトラフィックが暗号化されていないと、
     セッションIDがネットワーク越しにプレーンテキスト内に流出してしまいます。
     防御策は、SSL/TLS をサーバ側で実装し、ユーザーがそれを使うように強制することです。
     HSTS も、セキュリティを向上させるために使えるはずです。
   </para>

   <note>
    <simpara>
     HTTPS でさえも、あらゆる時に機密データを保護することはできません。
     たとえば、CRIME や Beast 脆弱性が、攻撃者にデータを読めるようにしてしまうかもしれません。
     また、多くのネットワークは HTTPS の MITMプロキシ を監査の目的で採用しています。
     攻撃者も、そうしたプロキシをセットアップしているかもしれません。
    </simpara>
   </note>

  </sect2>

  <sect2 xml:id="features.session.security.management.non-adaptive-session">
   <title>セッションアダプションを防ぐためのセッション管理</title>

   <para>
    PHP のセッションマネージャーは、
    現状ではデフォルトでセッションアダプション攻撃が可能です。
    アダプション攻撃が可能なセッションマネージャーは、
    追加のリスクを背負うことになります。
   </para>

   <para>
    PHP 5.5.2 以降では、
    <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>
    が利用できます。
    これを有効にし、かつセッションの保存ハンドラがサポートしている場合、
    初期化されていないセッションIDは拒否され、新しいものが作成されます。
    これによって、攻撃者がユーザーに既知のセッションIDを強制的に使わせることを防止できます。
    攻撃者はセッションID付きのリンクをペーストしたり、
    そうしたリンクを含んだメールを送るかもしれません。
    たとえば <literal>http://example.com/page.php?PHPSESSID=123456789</literal> のようなものです。
    <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link> が有効な場合、
    ユーザーは攻撃者が提供したセッションIDを使ってセッションを開始してしまいます。
    <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link> は、
    こうしたリスクを軽減します。
   </para>

   <warning>
    <simpara>
     ユーザー定義の保存ハンドラも、セッションIDの検証を行うことで
     厳格なセッションモードをサポートできます。
     保存ハンドラを定義した全てのユーザーは、セッションIDの検証を実装すべきです。
    </simpara>
   </warning>

   <para>
    セッションIDクッキーは、domain, path, httponly, secure, そして
    PHP 7.3 以降では、SameSite 属性とともに設定できます。
    これは、ブラウザで定義されたものが優先します。
    この優先される仕組みを使い、攻撃者は永久に使えるセッションIDを設定できてしまいます。
    <link linkend="ini.session.use-only-cookies">session.use_only_cookies</link>
    はこの問題を解決できません。
    <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>
    を使うとこのリスクを軽減できます。
    <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>=On にすると、
    初期化されていないセッションIDは拒否されます。
   </para>

   <note>
    <simpara>
     <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>
     はアダプション可能なセッション管理機構のリスクを軽減しますが、
     攻撃者は自らが生成したセッションIDを、
     初期化済みセッションIDとして使わせることが出来てしまいます。
     たとえば JavaScriptインジェクション攻撃です。
     この攻撃はこのマニュアルで推奨する方法で軽減できます。
    </simpara>

    <simpara>
     このマニュアルに従い、開発者は
     <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>
     を有効にし、タイムスタンプベースのセッション管理を行い、
     推奨する手続きを使って <function>session_regenerate_id</function> を使い
     セッションIDの再生成を行うべきです。
     開発者が上記全てに従えば、攻撃者が生成したセッションIDは、結局は削除されます。
    </simpara>

    <simpara>
     有効期限が切れたセッションにアクセスされたときのために、
     開発者は全てのアクティブなユーザーのセッションデータを保存すべきです。
     この情報は後に行われる調査とも関係があります。
     ユーザーは全てのセッションから強制的にログアウトさせられるべきです。
     つまり、再認証させるべきです。
     こうすることで、攻撃者が盗まれたセッションを悪用することを防止できます。
    </simpara>
   </note>

   <warning>
    <simpara>
     有効期限が切れたセッションにアクセスすることが、
     必ずしも攻撃であることを示しているとは限りません。
     不安定なネットワークや、 
     アクティブなセッションをすぐに削除してしまったりすることが原因で、
     正当なユーザーが、有効期限が切れたセッションにアクセスすることがあるからです。
    </simpara>
   </warning>

   <para>
    PHP 7.1.0 以降、<function>session_create_id</function> が追加されました。
    この関数は、セッションIDの前にユーザー定義のIDをつけることで、
    全てのアクティブなユーザーのセッションに効率的にアクセスできます。
    <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>
    を有効にすることが重要です。有効にしないと、
    悪意のあるユーザーが悪意のあるセッションIDを他のユーザーに設定できてしまいます。
   </para>

   <note>
    <simpara>
     PHP 7.1.0 より前のバージョンのユーザーは新しいセッションIDを生成する
     のに CSPRNG、つまり /dev/urandom や <function>random_bytes</function>
     やハッシュ関数を使うべきです。
     <function>session_create_id</function> には衝突を検出する機能があり、
     セッションの INI 設定に従ってセッションIDを生成します。
     <function>session_create_id</function> の利用が好ましいです。
    </simpara>
   </note>

  </sect2>

  <sect2 xml:id="features.session.security.management.session-id-regeneration">
   <title>セッションID の再生成</title>

   <para>
    <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>
    は良い軽減策ですが、十分ではありません。開発者はセッションのセキュリティのために
    <function>session_regenerate_id</function> を同時に使うべきです。
   </para>

   <para>
    セッションIDを再生成すると、盗まれたセッションIDを使われるリスクが減らせるので、
    <function>session_regenerate_id</function> 関数は定期的に呼び出されなければなりません。
    たとえば、セキュリティに敏感な内容を扱っているのなら、
    セッションIDを15分毎に再生成するようにしてください。
    セッションID が盗まれた場合でも、正当なユーザーと攻撃者のセッションは両方時間切れになります。
    言い換えれば、ユーザーだろうと攻撃者のアクセスだろうと、
    期限切れのセッションにアクセスしたとしてエラーになるのです。
   </para>

   <para>
    セッションID はユーザーの権限が上昇したときは再生成されなければ <emphasis>なりません</emphasis>。
    たとえば認証が成功した後などです。
    <function>session_regenerate_id</function> は、
    認証情報を $_SESSION に設定する前に必ずコールされなければなりません。
    (PHP 7.0.0 以降では、<function>session_regenerate_id</function> は
    タイムスタンプなどを保存するために、現在のセッションにセッションデータを自動的に保存します)
    必ず新しいセッションだけに、認証済みのフラグが含まれるようにしてください。
   </para>

   <para>
    開発者は
    <link linkend="ini.session.gc-maxlifetime">session.gc_maxlifetime</link>
    によるセッションの期限切れに依存しては <emphasis>いけません</emphasis>。
    攻撃者は、認証済みのセッションも含めて、期限切れを防いで悪用を続けるため、
    ターゲットのセッションIDに定期的にアクセスしている可能性があるからです。
   </para>

   <para>
    そのかわりに、開発者はタイムスタンプベースのセッション管理を実装しなければなりません。
   </para>

   <warning>
    <simpara>
     セッションマネージャーはタイムスタンプを透過的に管理できますが、
     この機能はまだ実装されていません。
     古いセッションデータは GC されるまで保持されなければなりません。
     同時に、開発者は期限切れになったセッションデータが削除されることを保証しなければなりません。
     たとえば、<literal>session_regenerate_id(true);</literal> と
     <function>session_destroy</function> をアクティブなセッションに対して同時に呼んでは絶対にいけません。
     これは矛盾したように聞こえますが、これは必須条件です。
    </simpara>
   </warning>

   <para>
    <function>session_regenerate_id</function> は、
    デフォルトで期限切れのセッションを削除 <emphasis>しません</emphasis>。
    期限切れの認証済みのセッションが存在するかもしれません。
    開発者は期限切れのセッションは、誰からも消費されないようにしなければなりません。
    期限切れのセッションデータへのアクセスを、タイムスタンプを使うことで禁止すべきです。
   </para>

   <warning>
    <simpara>
     アクティブなセッションを突然削除すると、望まない副作用が起きます。
     Webアプリケーションへの同時接続が起きた かつ/または
     ネットワークが不安定な場合に、セッションが突然消える可能性があります。
    </simpara>
    <simpara>
     アクティブなセッションが突然消えてしまうと、
     悪意のあるアクセスの可能性を検出することができなくなります。
    </simpara>
    <simpara>
     期限切れのセッションを突然削除するのではなく、
     開発者は短い期限切れの時間(タイムスタンプ)を $_SESSION に設定し、
     セッションデータにアクセスすることを自分で禁止すべきです。
    </simpara>
    <simpara>
     開発者は <function>session_regenerate_id</function> を呼び出した後すぐに、
     古いセッションデータへのアクセスを禁止してはいけません。
     その後の段階で禁止しなければなりません。
     たとえば、有線ネットワークのような安定したネットワークは数秒後、
     無線LAN や携帯電話のような不安定なネットワークの場合は、2, 3分後です。
    </simpara>
    <simpara>
     ユーザーのアクセスが期限切れのセッションだった場合、
     アクセスを拒否するべきです。攻撃されている可能性があるすべてのユーザーから、
     認証済みのステータスを削除することも推奨します。
    </simpara>
   </warning>

   <para>
    <link linkend="ini.session.use-only-cookies">session.use_only_cookies</link>
    と <function>session_regenerate_id</function> を適切に使うことで、
    攻撃者によって設定された、削除できないクッキーを伴うDOSが発生することがあります。
    この場合、開発者はユーザーに Cookie を削除させ、
    セキュリティ上の問題に晒されていることを教えることができます。
    攻撃者は、脆弱なWebアプリケーションや
    ウイルスに感染したブラウザのプラグイン、
    物理的に侵害されたデバイスなどを経由して悪意のあるCookieを設定している可能性があります。
   </para>

   <warning>
    <simpara>
     DOS のリスクを誤解しないでください。
     <literal>use_strict_mode=On</literal> は一般的なセッションIDのセキュリティには必須です!
     全てのサイトが <literal>use_strict_mode</literal> を有効にすることをお勧めします。
    </simpara>
    <simpara>
     DOS はアカウントが攻撃されている場合にだけ発生する可能性があります。
     アプリケーションに存在する JavaScript インジェクションの脆弱性がもっともよくある原因です。
    </simpara>
   </warning>

  </sect2>

  <sect2 xml:id="features.session.security.management.session-data-deletion">
   <title>セッションデータを削除する</title>

   <para>
    期限切れのセッションデータは、アクセス不能にし、削除しなければなりません。
    現状のセッションモジュールはこの機能をうまく扱えません。
   </para>

   <para>
    期限切れのセッションデータは、できるだけ早く削除すべきです。
    しかしながら、アクティブなセッションは、すぐに削除してはいけません。
    これらの要求を満たすためには、
    開発者はタイムスタンプベースのセッション管理を自分自身で実装する必要があります。
   </para>

   <para>
    期限切れのタイムスタンプを $_SESSION に設定し、管理します。
    期限切れのセッションデータへのアクセスは禁止します。
    期限切れのセッションデータへのアクセスが検出された場合、
    そのユーザーのセッションから認証済みのステータスを全て取り除き、
    強制的に再認証させることをおすすめします。
    期限切れのセッションデータへのアクセスは、攻撃されている可能性があります。
    これを実現するために、
    開発者はユーザーごとに全てのアクティブなセッションを追跡しなければなりません。
   </para>

   <note>
    <simpara>
     期限切れのセッションへのアクセスは、ネットワークが不安定だったり、
     Webサイトへの同時アクセスも原因で起こりえます。
     たとえば、サーバは新しいセッションIDを Cookie 経由で設定しようとしたが、
     接続が失われたため Set-Cookie のパケットが
     クライアントに届かなかったりする可能性があります。
     ある接続で、<function>session_regenerate_id</function> によって新しいセッションIDが発行されたけれども、
     別の同時接続が、まだ新しいセッションIDを受け取っていない可能性もあります。
     よって、開発者は期限切れのセッションへのアクセスを後の段階で禁止しなければなりません。
     すなわち、タイムスタンプベースのセッション管理が必須なのです。
    </simpara>
   </note>

   <para>
    まとめると、セッションデータは
    <function>session_regenerate_id</function> や <function>session_destroy</function>
    を使って破棄してはいけません。
    むしろ、セッションデータへのアクセスを制御するためにタイムスタンプを使わなければなりません。
    <function>session_gc</function> 関数に、
    セッションデータストレージから、期限切れのデータを削除させましょう。
   </para>

  </sect2>

  <sect2 xml:id="features.session.security.management.session-locking">
   <title>Session とロック</title>

   <para>
    セッションデータはレースコンディションを避けるため、デフォルトでロックされます。
    ロックを掛けることは複数のリクエスト間でセッションデータの一貫性を保つため、必須です。
   </para>

   <para>
    しかしながら、セッションをロックしてしまうと、
    攻撃者がDOS攻撃に悪用する可能性があります。
    セッションをロックすることによるDOS攻撃のリスクを軽減するためには、
    ロックを最小限にすることです。
    セッションデータを更新する必要がないときは、読み取り専用のセッションを使うようにします。
    <literal>session_start(['read_and_close'=>1]);</literal>
    $_SESSION を更新した後は、<function>session_commit</function> を使って
    できるだけ早くセッションを閉じるようにします。
   </para>

   <para>
    現状のセッションモジュールは、
    セッションがアクティブでない時に $_SESSION が変更されたかを検知 <emphasis>しません</emphasis>。
    セッションがアクティブでない時に $_SESSION を変更しないことは、開発者の責任です。
   </para>

  </sect2>

  <sect2 xml:id="features.session.security.management.active-sessions">
   <title>アクティブなセッション</title>

   <para>
    開発者は、ユーザーごとにアクティブなセッションを追跡し続けるべきです。
    そして、アクティブなセッションの数がどれくらいあるかや、
    どのIP(や地域) からかとか、どのくらいの期間アクティブなのか、などです。
    PHP はこれらを追跡しません。開発者が行うことが想定されています。
   </para>

   <para>
    これを実装するやり方はたくさんあります。
    ひとつの可能な実装は、データベースをセットアップして必須のデータを追跡し、
    関連するあらゆる情報を保存することです。
    セッションデータは GC されるので、開発者はアクティブなセッションのデータベースが一貫性を保つように
    GC されたデータに注意を払わなければなりません。
   </para>

   <para>
    一番簡単な実装は、"ユーザーIDをセッションIDの前に付ける" ことで、
    必須の情報を $_SESSION に保存することです。
    多くのデータベースは文字列の prefix を選択するのに良いパフォーマンスを発揮します。
    開発者は <function>session_regenerate_id</function> と
    <function>session_create_id</function> をこの目的で使うこともできます。
   </para>

   <warning>
    <simpara>
     秘密のデータを prefix に絶対に使わないでください。
     ユーザーIDが秘密の場合、<function>hash_hmac</function> を使うことも検討しましょう。
    </simpara>
   </warning>

   <warning>
    <simpara>
     <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>
     はこの場合に必須です。必ず有効にするようにしてください。
     そうしなければ、アクティブなセッションデータベースが侵害される可能性があります。
    </simpara>
   </warning>

   <para>
    タイムスタンプベースのセッション管理は、時間切れのセッションへのアクセスを検知するのに必須です。
    時間切れのセッションへのアクセスが検知された場合、
    そのユーザーの全てのアクティブなセッションから認証済みのフラグを削除すべきです。
    こうすることで、攻撃者が盗んだセッションを悪用し続けることを防げます。
   </para>

  </sect2>

  <sect2 xml:id="features.session.security.management.session-and-autologin">
   <title>Session と自動ログイン</title>

   <para>
    開発者は有効期間が長いセッションを、自動ログインに使ってはいけません。
    なぜなら、セッションが盗まれるリスクが増えるからです。
    自動ログイン機能は、開発者が実装すべきです。
   </para>

   <para>
    <function>setcookie</function> を使い、
    セキュアなワンタイムハッシュを自動ログインのキーとして使います。
    SHA-2 より強いセキュアなハッシュを使います。
    たとえば、 <function>random_bytes</function> や /dev/urandom で生成したランダムデータを 
    SHA-256 またはそれより強いハッシュ関数と一緒に使います。
   </para>

   <para>
    ユーザーが認証されていなかったら、ワンタイムの自動ログインキーが有効かどうかをチェックします。
    もし、キーが正しければ、ユーザーを認証し、新しいセキュアなワンタイムハッシュキーを設定します。
    自動ログインキーを使うのは一度きりです。つまり、再利用してはいけません。
    常に新しいものを生成するようにします。
   </para>

   <para>
    自動ログインのキーが長期間有効な認証キーである場合、
    できるだけ手厚く保護すべきです。
    path/httponly/secure/SameSite cookie 属性をセキュアにするために使います。
    つまり、自動ログインキーを必要ないのに送信しないでください。
   </para>

   <para>
    開発者は自動ログインを無効にする機能や、
    不要な自動ログインのキーを削除する機能を実装しなければなりません。
   </para>

  </sect2>

  <sect2 xml:id="features.session.security.management.csrf">
   <title>CSRF (Cross-Site Request Forgeries) 攻撃</title>

   <para>
    セッションと認証は、CSRF 攻撃を防ぐことはありません。
    開発者は CSRF への防御を自分で実装しなければなりません。
   </para>

   <para>
    CSRF 攻撃を防ぐために、
    <function>output_add_rewrite_var</function> 関数が使えます。
    詳細はマニュアルページを参照してください。
   </para>

   <note>
    <simpara>
     PHP 7.2.0 より前のバージョンでは、trans sid と同じ出力バッファとINI 設定を使っていました。
     よって、PHP 7.2.0 より前のバージョンで
     <function>output_add_rewrite_var</function> を使うことはおすすめしません。
    </simpara>
   </note>

   <para>
    ほとんどの Webアプリケーションフレームワークは、CSRF から防御する機能をサポートしています。
    詳細は、Webアプリケーションフレームワークのマニュアルを参照してください。
   </para>

   <para>
    PHP 7.3 以降では、セッションクッキーにSameSite 属性が設定できます。
    この属性も、CSRF 脆弱性を軽減できる追加の対策になります。
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="session.security.ini">
  <title>セッションに関連する INI 設定をセキュアにする</title>

  <para>
   By securing session related INI settings, developers can improve session security.
   Some important INI settings do not have any recommended settings.
   Developers are responsible for hardening session settings.
  </para>

  <itemizedlist>
    <listitem>
     <para>
      <link linkend="ini.session.cookie-lifetime">session.cookie_lifetime</link>=0
     </para>
     <para>
      <literal>0</literal> possesses a particular meaning.
      It informs browsers not to store the cookie to permanent storage.
      Therefore, when the browser is terminated, the session ID cookie is deleted immediately.
      If developers set this other than 0, it may allow other users to use the session ID.
      Most applications should use "<literal>0</literal>" for this.
     </para>
     <para>
      If an auto-login feature is required,
      developers must implement their own secure auto-login feature.
      Do not use long life session IDs for this.
      More information can be found above in the relevant section.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.use-cookies">session.use_cookies</link>=On
     </para>
     <para>
      <link linkend="ini.session.use-only-cookies">session.use_only_cookies</link>=On
     </para>
     <para>
      Although HTTP cookies suffer some problems,
      cookies remain the preferred way to manage session IDs. 
      Only use cookies for session ID management when it is possible.
      Most applications should use a cookie for the session ID.
     </para>
     <para>
      If <literal>session.use_only_cookies</literal>=Off,
      the session module will use the session ID values set by
      GET/POST/URL provided the session ID cookie is uninitialized.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.use-strict-mode">session.use_strict_mode</link>=On
     </para>
     <para>
      Although, enabling <literal>session.use_strict_mode</literal>
      is mandatory for secure sessions. It is disabled by default.
     </para>
     <para>
      This prevents the session module to use an uninitialized session ID.
      Put differently, the session module only accepts valid session IDs
      generated by the session module.
      It rejects any session ID supplied by users.
     </para>
     <para>
      Due to the cookie specification, attackers are capable to place
      non removable session ID cookies by locally setting a cookie database
      or JavaScript injections.
      <literal>session.use_strict_mode</literal> can prevent an attacker
      initialized session ID of being used.
     </para>
     <note>
      <para>
       Attackers may initialize a session ID with their device and may set
       the session ID of the victim. They must keep the session ID active to abuse.
       Attackers require additional steps to perform an attack in this scenario.
       Therefore, <literal>session.use_strict_mode</literal> works as a mitigation.
      </para>
     </note>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.cookie-httponly">session.cookie_httponly</link>=On
     </para>
     <para>
      Refuses access to the session cookie from JavaScript.
      This setting prevents cookies snatched by a JavaScript injection.
     </para>
     <para>
      It is possible to use a session ID as a CSRF token, but this is not recommended.
      For example, HTML sources may be saved and sent to other users.
      Developers should not write session IDs in web pages for better security.
      Almost all applications must use the httponly attribute for the session ID cookie.
     </para>
     <note>
      <para>
       The CSRF token should be renewed periodically just like the session ID.
      </para>
     </note>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.cookie-secure">session.cookie_secure</link>=On
     </para>
     <para>
      Allow access to the session ID cookie only when the protocol is HTTPS.
      If a website is only accessible via HTTPS, it should enable this setting.
     </para>
     <para>
      HSTS should be considered for websites accessible only via HTTPS.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.cookie-samesite">session.cookie_samesite</link>="Lax" or
      <link linkend="ini.session.cookie-samesite">session.cookie_samesite</link>="Strict"
     </para>
     <para>
      As of PHP 7.3 the <literal>"SameSite"</literal> attribute can be set for the session ID cookie.
      This attribute is a way to mitigate CSRF (Cross Site Request Forgery) attacks.
     </para>
     <para>
      The difference between Lax and Strict is the accessibility of the cookie in
      requests originating from another registrable domain employing the HTTP GET method.
      Cookies using Lax will be accessible in a GET request originated from
      another registrable domain, whereas cookies using Strict will not.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.gc-maxlifetime">session.gc_maxlifetime</link>=[choose smallest possible]
     </para>
     <para>
      <literal>session.gc_maxlifetime</literal>
      is a setting for deleting obsolete session ID.
      Reliance on this setting is <emphasis>not</emphasis> recommended.
      Developers should manage the lifetime of sessions with a timestamp by themselves.
     </para>
     <para>
      Session GC (garbage collection) is best performed by using <function>session_gc</function>.
      The <function>session_gc</function> function should be executed by a task
      managers. E.g. cron on UNIX like systems.
     </para>
     <para>
      GC is performed by probability by default.
      This setting does <emphasis>not</emphasis> guarantee that an outdated
      session is deleted.
      Although developers cannot rely on this setting,
      specifying it to the smallest possible value is recommended.
      Adjusting <link
      linkend="ini.session.gc-probability">session.gc_probability</link>
      and <link
      linkend="ini.session.gc-divisor">session.gc_divisor</link> so
      that obsolete sessions are deleted at an appropriate frequency.
      If an auto-login feature is required, developers must implement their own
      secure auto-login feature, see above for more information.
      Never use long life session ID for this feature.
     </para>
     <note>
      <para>
       Some session save handler modules do not use this setting for probability
       based expiration. E.g. memcached, memcache.
       Refer to the session save handler documentation for details.
      </para>
     </note>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>=Off
     </para>
     <para>
      Use of a transparent session ID management is not prohibited.
      Developers may employ it when it is required.
      However, disabling transparent session ID management improves the general session
      ID security by eliminating the possibility of a session ID injection and/or leak.
     </para>
     <note>
      <para>
       Session ID may leak from bookmarked URLs, e-mailed URLs, saved HTML source, etc.
      </para>
     </note>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.trans-sid-tags">session.trans_sid_tags</link>=[limited tags]
     </para>
     <para>
      (PHP 7.1.0 &gt;=) Developers should not rewrite unneeded HTML tags.
      Default value should be sufficient for most usages.
      Older PHP versions use
      <link linkend="ini.url-rewriter.tags">url_rewriter.tags</link> instead.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.trans-sid-hosts">session.trans_sid_hosts</link>=[limited hosts]
     </para>
     <para>
      (PHP 7.1.0 &gt;=) This INI defines whitelist hosts that allows trans sid rewrite.
      Never add untrusted hosts.
      Session module only allows <literal>$_SERVER['HTTP_HOST']</literal>
      when this setting is empty.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.referer-check">session.referer_check</link>=[originating URL]
     </para>
     <para>
      When <link
      linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
      is enabled.
      It reduces the risk of session ID injection.
      If a website is http://example.com/, set http://example.com/ to it.
      Note that with HTTPS browsers will not send the referrer header.
      Browsers may not send the referrer header by configuration.
      Therefore, this setting is not a reliable security measure.
      Use of this setting is recommended.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.cache-limiter">session.cache_limiter</link>=nocache
     </para>
     <para>
      Ensure HTTP content are uncached for authenticated sessions.
      Allow caching only when the content is not private.
      Otherwise, content may be exposed. "private" may be employed if HTTP content does not
      include security sensitive data.
      Note that "private" may transmit private data cached by shared clients.
      "public" must only be used when HTTP content does not contain any private data at all.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.sid-length">session.sid_length</link>="48"
     </para>
     <para>
      (PHP 7.1.0 &gt;=) Longer session IDs results in stronger session IDs.
      Developers should consider a session ID length of 32 characters or more.
      At least 26 characters are required when
      <link linkend="ini.session.sid-bits-per-character">session.sid_bits_per_character</link>="5".
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.sid-bits-per-character">session.sid_bits_per_character</link>="6"
     </para>
     <para>
      (PHP 7.1.0 &gt;=) The more bits there are in a session ID character,
      the stronger the session ID generated by the session module is for an
      identical session ID length.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ini.session.hash-function">session.hash_function</link>="sha256"
     </para>
     <para>
      (PHP 7.1.0 &lt;) A stronger hash function will generate a stronger session ID.
      Although hash collision is unlikely even with the MD5 hashing algorithm,
      developers should use SHA-2 or a stronger hashing algorithm like sha384 and sha512.
      Developers must ensure they feed a long enough
      <link linkend="ini.session.entropy-length">entropy</link>
      for the hashing function used.
     </para>
    </listitem>

  </itemizedlist>
 </sect1>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
