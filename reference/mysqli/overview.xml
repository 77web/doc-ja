<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 40667918dcff1d5c9f7ecdc88b5caca24ba0686c Maintainer: mumumu Status: working -->
<chapter xml:id="mysqli.overview" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">

  <title>mysqli の概要</title>

  <para>
    このセクションでは、 PHP アプリケーションの開発で MySQL データベースを扱うときの選択肢について説明します。 
  </para>

  <para>
    <emphasis role="bold">API って何?</emphasis>
  </para>

  <para>
    API は Application Programming Interface の略で、 何らかのタスクを実行するためにアプリケーションから呼び出す必要のある クラスやメソッド、関数、変数などを定義したものです。 データベースとの通信を必要とする PHP アプリケーションが使うための API は、 通常は PHP の拡張モジュールとして公開されています。 
  </para>

  <para>
    API は手続き型にすることもできるし、 オブジェクト指向型にすることもできます。 手続き型の API の場合は何かの処理を実行するための関数を呼ぶことになり、 オブジェクト指向型の API の場合はクラスのインスタンスを作ってそのメソッドを呼ぶことになります。 通常は、後者の方法をおすすめします。 後者のほうがよりモダンであり、 きっちりとしたコードを書けるからです。 
  </para>

  <para>
    MySQL サーバーとの接続が必要な PHP アプリケーションを書く場合に 使える API はいくつかあって、その中から選べます。 このドキュメントでは、 どんな API が使えてどれを選ぶのが最適なのかを解説します。 
  </para>

  <para>
    <emphasis role="bold">コネクタとは?</emphasis>
  </para>

  <para>
    MySQL のドキュメントで使われている <emphasis>コネクタ</emphasis> という用語は、 何かのアプリケーションから MySQL データベースサーバーに接続するためのソフトウェアのことを指します。 MySQL はさまざまな言語用のコネクタを提供しており、 PHP もその中に含まれます。 
  </para>

  <para>
    PHP のアプリケーションで、 データベースサーバーとの通信が必要になったときには、 データベースサーバーへの接続やデータベースへの問い合わせなどの関数を呼ぶ PHP コードを書くことになるでしょう。 つまり、PHP アプリケーションから使える API を提供するソフトウェアが必要になるということです。 そのソフトウェアは、 アプリケーションとデータベースサーバーの間の通信も処理しないといけません。 おそらくは中間ライブラリも利用することになるでしょう。 このソフトウェアのことを一般的にコネクタと呼びます。 というのも、 このソフトウェアのおかげで アプリケーションがデータベースサーバーに 接続 (<emphasis>connect</emphasis>) できるようになるからです。 
  </para>

  <para>
    <emphasis role="bold">ドライバとは?</emphasis>
  </para>

  <para>
    ドライバとは、 特定のデータベースサーバーとの通信をするために作られたソフトウェアのことです。 ドライバはライブラリと呼ばれることもあり、 MySQL Client Library や MySQL Native Driver というように使われます。 これらのライブラリが実装するのは低レベルのプロトコルで、 これを使って MySQL データベースサーバーと通信します。 
  </para>

  <para>
    例を挙げると、データベース抽象化レイヤーの <link linkend="mysqli.overview.pdo">PHP Data Objects (PDO)</link> は各データベース専用のドライバの中からひとつを選んで使います。 数あるドライバの中のひとつに PDO MYSQL ドライバがあり、 これが MySQL サーバーとのインターフェイスとなります。 
  </para>

  <para>
    人によっては、コネクタとドライバを混同して使うこともあって、 混乱の元となります。 MySQL 関連のドキュメントでは、<quote>ドライバ</quote> という用語は、 コネクタパッケージのうち、 データベース固有の機能を提供するソフトウェアという意味で 予約されています。 
  </para>

  <para>
    <emphasis role="bold">拡張モジュールとは?</emphasis>
  </para>

  <para>
    PHP のドキュメントを読んでいると、<emphasis>拡張モジュール</emphasis> という用語がよく出てきます。 PHP のコードには、コア機能とは別に オプションの拡張モジュールが用意されています。 PHP で使える MySQL 関連の拡張モジュールには mysqli や PDO MySQL があり、 PHP の拡張モジュール用フレームワークを使って実装されています。 
  </para>

  <para>
    拡張モジュールは一般的に PHP プログラマー向けの API を公開しており、 その機能をプログラムから使えるようになっています。 しかし、PHP 拡張モジュールフレームワークを使って書かれた拡張モジュールの中には、 PHP プログラマー向けの API を公開していないものもあります。 
  </para>

  <para>
     たとえば PDO MySQL ドライバは PHP の拡張モジュールですが、 それ自体は PHP プログラマー向けの API を公開していません。 さらに上位にある PDO レイヤーへのインターフェイスを提供しているだけです。 
  </para>

  <para>
    API と拡張モジュールとは同じ意味ではありません。 拡張モジュールが必ずしもプログラマー向けの API を公開しているとは限らないからです。 
  </para>

  <para>
    <emphasis role="bold">What are the main PHP API offerings for using
    MySQL?</emphasis>
  </para>

  <para>
    There are two main API options when considering connecting to a
    MySQL database server:
  </para>

  <itemizedlist>

    <listitem>
      <para>
        PHP's mysqli Extension
      </para>
    </listitem>

    <listitem>
      <para>
        PHP Data Objects (PDO)
      </para>
    </listitem>

  </itemizedlist>

  <para>
    Each has its own advantages and disadvantages. The following
    discussion aims to give a brief introduction to the key aspects of
    each API.
  </para>

  <para>
    <emphasis role="bold">What is PHP's mysqli Extension?</emphasis>
  </para>

  <para>
    The <literal>mysqli</literal> extension, or as it is sometimes
    known, the MySQL <emphasis>improved</emphasis> extension, was
    developed to take advantage of new features found in MySQL systems
    versions 4.1.3 and newer. The <literal>mysqli</literal> extension is
    included with PHP versions 5 and later.
  </para>

  <para>
    The <literal>mysqli</literal> extension has a number of benefits,
    the key enhancements over the <literal>mysql</literal> extension
    being:

    <itemizedlist>

      <listitem>
        <para>
          Object-oriented interface
        </para>
      </listitem>

      <listitem>
        <para>
          Support for Prepared Statements
        </para>
      </listitem>

      <listitem>
        <para>
          Support for Multiple Statements
        </para>
      </listitem>

      <listitem>
        <para>
          Support for Transactions
        </para>
      </listitem>

      <listitem>
        <para>
          Enhanced debugging capabilities
        </para>
      </listitem>

    </itemizedlist>
  </para>

  <para>
    As well as the object-oriented interface the extension also provides
    a procedural interface.
  </para>

  <para>
    The <literal>mysqli</literal> extension is built using the PHP
    extension framework, its source code is located in the directory
    <filename>ext/mysqli</filename>.
  </para>

  <para>
    For further information on the <literal>mysqli</literal> extension,
    see <xref linkend="book.mysqli"/>.
  </para>

  <para xml:id="mysqli.overview.pdo">
    <emphasis role="bold">What is PDO?</emphasis>
  </para>

  <para>
    PHP Data Objects, or PDO, is a database abstraction layer
    specifically for PHP applications. PDO provides a consistent API for
    your PHP application regardless of the type of database server your
    application will connect to. In theory, if you are using the PDO
    API, you could switch the database server you used, from say
    Firebird to MySQL, and only need to make minor changes to your PHP
    code.
  </para>

  <para>
    Other examples of database abstraction layers include JDBC for Java
    applications and DBI for Perl.
  </para>

  <para>
    While PDO has its advantages, such as a clean, simple, portable API,
    its main disadvantage is that it doesn't allow you to use all of the
    advanced features that are available in the latest versions of MySQL
    server. For example, PDO does not allow you to use MySQL's support
    for Multiple Statements.
  </para>

  <para>
    PDO is implemented using the PHP extension framework, its source
    code is located in the directory <filename>ext/pdo</filename>.
  </para>

  <para>
    For further information on PDO, see the
    <xref linkend="book.pdo"/>.
  </para>

  <para>
    <emphasis role="bold">What is the PDO MYSQL driver?</emphasis>
  </para>

  <para>
    The PDO MYSQL driver is not an API as such, at least from the PHP
    programmer's perspective. In fact, the PDO MYSQL driver sits in the
    layer below PDO itself and provides MySQL-specific functionality.
    The programmer still calls the PDO API, but PDO uses the PDO MYSQL
    driver to carry out communication with the MySQL server.
  </para>

  <para>
    The PDO MYSQL driver is one of several available PDO drivers. Other
    PDO drivers available include those for the Firebird and PostgreSQL
    database servers.
  </para>

  <para>
    The PDO MYSQL driver is implemented using the PHP extension
    framework. Its source code is located in the directory
    <filename>ext/pdo_mysql</filename>. It does not expose an API to the
    PHP programmer.
  </para>

  <para>
    For further information on the PDO MYSQL driver, see
    <xref linkend="ref.pdo-mysql"/>.
  </para>

  <para xml:id="mysqli.overview.mysqlnd">
    <emphasis role="bold">What is PHP's MySQL Native Driver?</emphasis>
  </para>

  <para>
    In order to communicate with the MySQL database server, <literal>mysqli</literal> and
    the PDO MYSQL driver each use a low-level library that implements
    the required protocol. In the past, the only available library was
    the MySQL Client Library, otherwise known as
    <literal>libmysqlclient</literal>.
  </para>

  <para>
    However, the interface presented by <literal>libmysqlclient</literal> was
    not optimized for communication with PHP applications, as
    <literal>libmysqlclient</literal> was originally designed with C
    applications in mind. For this reason, the MySQL Native Driver,
    <literal>mysqlnd</literal>, was developed as an alternative to
    <literal>libmysqlclient</literal> for PHP applications.
  </para>

  <para>
    Both, the <literal>mysqli</literal> extension and the PDO MySQL driver can
    each be individually configured to use either
    <literal>libmysqlclient</literal> or <literal>mysqlnd</literal>. As
    <literal>mysqlnd</literal> is designed specifically to be utilised
    in the PHP system it has numerous memory and speed enhancements over
    <literal>libmysqlclient</literal>. You are strongly encouraged to take
    advantage of these improvements.
  </para>

  <para>
    The MySQL Native Driver is implemented using the PHP extension
    framework. The source code is located in
    <filename>ext/mysqlnd</filename>. It does not expose an API to the
    PHP programmer.
  </para>

<!-- TODO
  <para>
    For further information on the MySQL Native Driver, see
    <xref linkend="book.mysqlnd"/>.
  </para>
-->

  <para>
    <emphasis role="bold">Comparison of Features</emphasis>
  </para>

  <para>
    The following table compares the functionality of the main
    methods of connecting to MySQL from PHP:
  </para>

  <table xml:id="mysqli.overview.option.comparison">
   <title>Comparison of MySQL API options for PHP</title>
    <tgroup cols="3">
      <colspec colwidth="34*"/>
      <colspec colwidth="33*"/>
      <colspec colwidth="33*"/>
      <thead>
        <row>
          <entry></entry>
          <entry>PHP's mysqli Extension</entry>
          <entry>PDO (Using PDO MySQL Driver and MySQL Native Driver)</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>PHP version introduced</entry>
          <entry>5.0</entry>
          <entry>5.0</entry>
        </row>
        <row>
          <entry>MySQL development status</entry>
          <entry>Active development</entry>
          <entry>Active development</entry>
        </row>
        <row>
          <entry>API supports Charsets</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>API supports server-side Prepared Statements</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>API supports client-side Prepared Statements</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>API supports Stored Procedures</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>API supports Multiple Statements</entry>
          <entry>Yes</entry>
          <entry>Most</entry>
        </row>
        <row>
          <entry>Supports all MySQL 4.1+ functionality</entry>
          <entry>Yes</entry>
          <entry>Most</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
<!--
  <para>
    <emphasis role="bold">Further information</emphasis>
  </para>

  <para>
    The PHP distribution and documentation are available from the
    <link xlink:href="http://www.php.net/">PHP Web site</link>.
  </para>
-->
</chapter>
