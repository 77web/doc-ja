<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5764345c8662c22b570bf453650a9dd584bd3abb Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa -->
<refentry xml:id="function.register-shutdown-function" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>register_shutdown_function</refname>
  <refpurpose>シャットダウン時に実行する関数を登録する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>register_shutdown_function</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <para>
   スクリプト処理が完了したとき、あるいは <function>exit</function>
   がコールされたときに実行するコールバック関数を登録します。
  </para>
  <para>
   <function>register_shutdown_function</function> は複数回コールする
   ことが可能で、登録された順に関数がコールされます。
   登録した関数内で <function>exit</function> をコールした場合、
   処理はそこで終了してその他のシャットダウン関数はコールされません。
  </para>
  <para>
   シャットダウン関数は、
   別のシャットダウン関数をキューの最後に追加するために、
   <function>register_shutdown_function</function>
   そのものをコールしても構いません。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       登録するコールバック。
      </para>
      <para>
       シャットダウン時のコールバックは、リクエストの一部として実行されます。
       したがって、コールバック関数からも出力を送信できるし、出力バッファにもアクセスできます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       シャットダウン関数にパラメータを渡すには、ここで追加のパラメータを渡します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   指定したコールバックがコールできない場合は、<constant>E_WARNING</constant>
   レベルのエラーが発生します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>register_shutdown_function</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
function shutdown()
{
    // これがシャットダウン関数で、
    // スクリプトの処理が完了する前に
    // ここで何らかの操作をすることができます

    echo 'Script executed with success', PHP_EOL;
}

register_shutdown_function('shutdown');
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Apache などいくつかの Web サーバーでは、スクリプトの実行時ディレクトリを
    シャットダウン関数内で変更可能です。
   </para>
  </note>
  <note>
   <para>
    SIGTERM あるいは SIGKILL でプロセスが終了した場合は、シャットダウン関数を実行しません。
    SIGKILL を横取りすることはできませんが、SIGTERM 用のハンドラは <function>pcntl_signal</function>
    で登録できます。ここで <function>exit</function> を使えば、きれいに終わらせることができます。
   </para>
  </note>
  <note>
   <para>
    シャットダウン関数は、
    <link linkend="ini.max-execution-time">max_execution_time</link>
    の経過とは別に実行されます。
    つまり、プロセスが非常に長時間実行された後に終了しても、
    シャットダウン関数はコールされます。
    さらに、
    シャットダウン関数を実行中に
    <literal>max_execution_time</literal>
    が経過しても、実行中の関数は終了しません。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="ini.auto-append-file">auto_append_file</link></member>
    <member><function>exit</function></member>
    <member><function>fastcgi_finish_request</function></member>
    <member><link linkend="features.connection-handling">接続処理</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
