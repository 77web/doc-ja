<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5e2031dc70157464c05c1c1e00b3201604a025f1 Maintainer: mumumu Status: ready -->
<refentry xml:id="random-engine.generate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Engine::generate</refname>
  <refpurpose>ランダムな値を生成する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Engine">
   <modifier>public</modifier> <type>string</type><methodname>Random\Engine::generate</methodname>
   <void/>
  </methodsynopsis>
  <para>
   ランダムな値を生成し、アルゴリズムの内部的なステートをひとつ進めます。
  </para>
  <para>
   ランダムな値は、ランダムなバイト列を含んだバイナリ文字列として表現されます。
   そう表現することで、アルゴリズムが生成したランダムなビットを、
   曖昧さがない形で解釈できるようになります。
   これはたとえば、アルゴリズムによって異なる出力サイズを調整する目的があります。
  </para>
  <para>
   整数の値をネイティブで操作するアルゴリズムは、
   たとえば <function>pack</function> 関数に <literal>P</literal>
   フォーマットコードを指定するなどして、リトルエンディアンで整数値を返すべきです。
   <classname>Random\Randomizer</classname> が提供する高レベルインターフェイスは、
   数値表現が必要な場合、返されたランダムなバイト列を符号なしのリトルエンディアンとして解釈します。
  </para>
  <para>
   返された文字列の個々のビットは、
   等確率に、かつ独立に選ばれた状態にあることを強く推奨します。
   アプリケーションによっては、正しく動作する要件が、
   ビットレベルでランダムであることに依存する場合があるからです。
   たとえば 線形合同法(LCGs) は、整数の下位ビットについては品質が低いランダムな値を生成するため、
   ビットレベルでランダムな状態を必須とするアプリケーションには適していません。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   ランダムなバイト列を含む、空でない文字列を返します。
  </para>

  <note>
   <simpara>
    <classname>Random\Randomizer</classname>
    は内部的に、符号なしの64ビット整数を使って動作します。
    返される文字列が 64ビット(8バイト)以上のランダムな文字列である場合、
    64ビットを超えるバイト列は無視されます。
    他のアプリケーションでは、
    64ビット以上のデータを一度に処理できるものがあるかもしれません。
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     ランダムな値を生成できなかった場合、
     <classname>Random\RandomException</classname> がスローされます。
     値を生成している途中でスローされる他の
     <classname>Exception</classname> は、
     キャッチされて <classname>Random\RandomException</classname> 
     でラップされます。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     返される文字列が空の場合、
     <classname>Random\Randomizer</classname> が
     <classname>Random\BrokenRandomEngineError</classname>
     をスローします。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     実装されているアルゴリズムにとても強い偏りがある場合、
     <classname>Random\Randomizer</classname> が
     <classname>Random\BrokenRandomEngineError</classname>
     をスローする場合があります。
     これは、偏りがない結果を返すために棄却サンプリングが必要な時に、
     無限ループに陥ることを避けるためです。
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>Random\Engine::generate</function> の例</title>
   <programlisting role="php">
<![CDATA[
<?php

/* ... */

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
...
]]>
   </screen>
  </example>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
